// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: shadower-vs:vert
      frag: shadower-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none 
      properties:
        alphaThreshold: { value: 0.5, editor: { range: [-1.0, 1.0], }, step: 0.01, }
        u_shadowSkew: { value: 0.5 }      # X方向斜切 
        u_shadowScale: { value: 0.3 }     # Y方向压扁
        u_shadowColor: { value: [0,0,0,0.5] }  # 阴影颜色
        u_shadowYOffset: { value: 0.0,  editor: { range: [-1.0, 1.0], }, step: 0.01, }

    - vert: sprite-vs:vert 
      frag: sprite-fs:frag
      depthStencilState: 
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram shadower-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  
  // 阴影参数 - 修正binding从0开始
  layout(set = 2, binding = 0) uniform ShadowParams {
    float u_shadowSkew;
    float u_shadowScale;
    float u_shadowYOffset; 
  };

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    // 原始位置计算
    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    // 阴影位置计算（斜切+压扁效果）
    vec4 shadowPos = vec4(a_position, 1);
    #if USE_LOCAL
      shadowPos = cc_matWorld * shadowPos;
    #endif
    
    // 应用斜切效果（X方向）
    shadowPos.x += shadowPos.y * u_shadowSkew;
    // 应用压扁效果（Y方向）
    shadowPos.y *= u_shadowScale;
    
    // 计算阴影的最终位置 
    #if USE_PIXEL_ALIGNMENT
      shadowPos = cc_matView * shadowPos; 
      shadowPos.xyz = floor(shadowPos.xyz);
      shadowPos = cc_matProj * shadowPos;
    #else 
      shadowPos = cc_matViewProj * shadowPos;
    #endif
    
    shadowPos.y += u_shadowYOffset;  
    // 选择使用阴影位置
    pos = shadowPos;

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%



CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%


CCProgram shadower-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  // 阴影颜色 - 修正binding为连续值
  layout(set = 2, binding = 1) uniform ShadowColor {
    vec4 u_shadowColor;
  };

  in vec4 color;
  in vec2 uv0;

  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 2) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // 应用阴影颜色
    o.rgb = u_shadowColor.rgb;
    o.a *= u_shadowColor.a;

    ALPHA_TEST(o);
    return o;
  }
}%


CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
